#+TITLE: Calendar Data Generator
#+AUTHOR: Russell Brinson

* Overview 

I have a calendar system in the fictional world for playing dungeons and dragons in that is different from the normal gregorian calendar. 

I had an idea to create a daily weather display that would generate weather and temperatures based on preset lookup tables and normal distributions. To faciliate this, I first need to convert the current format into one that easier to read by code for playing with this data.

This year is based on 7 days in 7 weeks / month in 7 months for the year. With a few outside of month holidays and celebrations. For the sake of simplifing, each of this will be given a ~dayID~ that will correspond to that day on a given year. This will not be what is displayed to the end users.

** Backend System(s) 

Will try to make a few different backend systems to learn some new languages. Go and haskell. 
These will ultimately server to do:
- open and read file into memory then close file
- use last fictional date data to generate the next date, when triggered
- write next data data to file then close file

** Frontend System(s)
not sure which language(s) at the moment
- open and read file into memory then close file
- use last fictional data data to showcase images and animations on a screen (like a weather report)
- repeat on periodic time to refresh

** calendar file
flat file structure for now, could get slightly more complicated later and use a database
needs to store:
- Month, Week, Day, Date, Year
- Season
- Weather
- Temp: max, min
- Moon(s?)
- Astrological signs?


* Define Variables
We will key each month to the season it corresponds with, then key each season to the weather it can generate. Then finally, key each weather to a max and min temperature (maybe?).

** Months, Seasons, and Temperatures
Note, New years and Midwinter aren't months, these are out of month celebrations but keeping similar seasons. 

*** Golang Implementation
#+BEGIN_SRC go

type monthInfo struct {
  name string
  season string
  diffWeather [11]seasonWeather
}

type seasonWeather struct {
  name string
  temp int
}

type dayID struct {
  idNum int
  month string
  weather string
  temp int
}


#+END_SRC

*** Hasekll Implementation
#+BEGIN_SRC haskell :tangle calgen.hs
import System.Random
import System.IO

springWeather = [ ("Cold, gentle snow", 40)
                , ("Chilly, damp", 42)
                , ("Windy, cloudy", 42)
                , ("Brisk, clear", 45)
                , ("Clement, cheery", 50)
                , ("Warm, sunny", 60)
                , ("Bright, fresh", 61)
                , ("Blustery, drizzle", 55)
                , ("Pouring rain", 45)
                , ("Gloomy, cool", 43)
                , ("Chill mist", 41)
                ]

summerWeather = [ ("Cool winds", 60)
                , ("Low cloud, mist", 62)
                , ("Warm, gentle rain", 68)
                , ("Brooding thunder", 72)
                , ("Balmy, clear", 78)
                , ("Hot, humid", 85)
                , ("Overcast, muggy", 81)
                , ("Sweltering, still", 90)
                , ("Baking, dry", 87)
                , ("Warm wind", 79)
                , ("Thunder storm", 75)
                ]

autumnWeather = [ ("Torrential rain", 72)
                , ("Rolling fog", 68)
                , ("Driving rain", 67)
                , ("Bracing wind", 65)
                , ("Balmy, clement", 75)
                , ("Clear, chilly", 64)
                , ("Drizzle, damp", 65)
                , ("Cloudy, misty", 62)
                , ("Brooding clouds", 63)
                , ("Frosty, chill", 45)
                , ("Icy gentle snow", 32)
                ]

winterWeather = [ ("Deep freeze, hoarfrost", -10)
                , ("Snow storm", 22)
                , ("Relentless wind", 25)
                , ("Bitter, silent", 15)
                , ("Frigid, icy", 30)
                , ("Clear, cold", 35)
                , ("Freezing rain" , 32)
                , ("Cold wind, gloomy", 33)
                , ("Frigid mist", 31)
                , ("Icy, steady snow", 28)
                , ("Relentless blizzard", 25)
                ]

monthSeasons = [ ("New Years", springWeather) 
               , ("Joseon", springWeather)
               , ("Marta", springWeather)
               , ("Nox", summerWeather)
               , ("Luckless", summerWeather)
               , ("Fomhar", autumnWeather)
               , ("Marsbas", winterWeather)
               , ("Midwinter", winterWeather)
               , ("Cead", winterWeather)
               ]

#+END_SRC

#+RESULTS:
: ghci> ghci> ghci> ghci> ghci> ghci> ghci> ghci> ghci> ghci> ghci> ghci> ghci> ghci> 
: <interactive>:333:18: error:
:     parse error (possibly incorrect indentation or mismatched brackets)




** TODO Add moon status

* Get Season, Weather, and Temperature from Month
** Get Random Weather for a Season

- month data will include the seasonal weather and weather associated temperature
- need to get random weather, which in turn would get temperature and generate from there 

- month data in ~[ (String,    [(String,              Integer    )]) ]~
- month data    ~[ (MonthName, [(Weather Description, Temperature)]) ]~

*** DONE Bring the ~getRandNum~ out from inside the nested function and just pass the return value at the top

- State "DONE"       from "TODO"       [2023-11-14 Tue 23:13]
*** Haskell
#+BEGIN_SRC haskell :tangle calgen.hs

getRandNum :: Int -> Int -> StdGen -> Int
getRandNum a b c = fst (randomR(a, b) c)

-- gives the 2d6 bell curve needed for the tables
twoD6roll :: StdGen -> StdGen -> Int
twoD6roll a b = (getRandNum 1 6 a) + (getRandNum 1 6 b)

-- gets passed list of strings that contain the weather descriptions
selectWeather :: [String] -> Int -> String
selectWeather a b = last (take b a)

-- gets passed the list of tuples that contain (Weather Description, Temperature)
randWeather :: [(String, Integer)] -> Int -> String
randWeather a b = selectWeather (map (\(x, _) -> x) a) b
--randWeather a b = selectWeather (fst a) (getRandNum 1 11 b)

-- gets passed the specific months needing a new date
-- then passes the second part of the tuple (which is the list of tuples that contain (Weather Description, Temp)
--      before returning the string from the other functions
-- putting the getRandNum here to keep this function as the abstracted level of diving into the others
randMnthWeather :: (String, [(String, Integer)]) -> StdGen -> StdGen -> String
randMnthWeather a b c = randWeather (snd a) ((twoD6roll b c) - 1)

--let g <- newStdGen
--  print . take 10 $ (randomRs ('a', 'z') g)

#+END_SRC

** Get Temperature for the Weather

*** DONE add tuple for temperature to have low and high for the day
- State "DONE"       from "TODO"       [2023-11-14 Tue 23:54]
*** Haskell 
going to reuse a lot of our structure from before but this time looking at the temperature side
#+BEGIN_SRC haskell :tangle calgen.hs

-- creates day's temperature high and low
createTempSpread :: Integer -> Integer -> Integer -> (Integer, Integer)
createTempSpread baseTemp dev1 dev2 = (baseTemp + dev1, baseTemp - dev2)

-- gets passed the list of tuples that contain (Weather Description, Temperature)
-- return the Temperature for a given Weather Description
getBaseTemp :: [(String, Integer)] -> String -> Integer 
getBaseTemp weatherInfo weatherDescription = snd (head (filter (\(x, _) -> x == weatherDescription) weatherInfo))

-- gets passed the specific months needing a new date
-- then passes the second part of the tuple (which is the list of tuples that contain (Weather Description, Temp)
-- putting the getRandNum here to keep this function as the abstracted level of diving into the others
getBaseTempforMonth :: (String, [(String, Integer)]) -> String -> Integer
getBaseTempforMonth monthInfo weatherDescription = getBaseTemp (snd monthInfo) weatherDescription



#+END_SRC

* Read in the file

** Open, Read, and Close the File
*** Haskell
#+BEGIN_SRC haskell :tangle calgen.hs
openReadClose = do
  fileHandle <- openFile "test.cal" ReadMode
  contents <- hGetContents fileHandle
  putStrLn contents
  importDay contents
  hClose fileHandle
#+END_SRC

** Put the contents into better variables
#+BEGIN_SRC haskell :tangle calgen.hs

-- gets passed a single day to turn into a better formatted piece of data
importDay :: String -> String
importDay a = tail a

#+END_SRC
